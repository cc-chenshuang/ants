server:
  port: 8081
  tomcat:
    #请求正文的最大大小
    max-swallow-size: -1
    # 最大链接数
    max-connections: 500
    # 最大线程数
    max-threads: 200
    # 最小线程数
    min-spare-threads: 20
    #连接超时时间
    connection-timeout: 10000
    #当长链接闲置 指定时间主动关闭 链接 ，前提是客户端请求头 带上这个 head"connection" " keep-alive"
    keepAliveTimeout: 5000
    #最大的 长连接数
    maxKeepAliveRequests: 100
  servlet:
    #访问路径前缀；如：localhost:8080/ants/**
    context-path: /ants
#druid监控台配置信息，主要用作sql监控，还能用来监控url等
druid:
  login:
    user_name: ants
    password: ants_123
#监控配置
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#  endpoint:
#    health:
#      show-details: ALWAYS
spring:
#  application:
#    name: ants-admin-client
#  boot:
#    admin:
#      client:
#        url: http://39.107.111.110:8769
##        url: http://127.0.0.1:8769
#        username: admin    #对应server端的账号密码，不配置就监控不到这个client。
#        password: admin
  rabbitmq:
    host: 39.107.111.110
    port: 5672
    username: guest
    password: guest
    #virtual-host:
    # ------- 消息确认配置项 --------
    # 确认消息已发送到交换机
    #publisher-confirms: true
    # 确认消息已发送队列
    publisher-returns: true
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  datasource:
    url: jdbc:mysql://39.107.111.110:33066/ants_boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
    username: root
    password: antsboot..
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    ########## 连接池 配置 ##########
    druid:
      # 配置初始化大小、最小、最大
      initial-size: 5
      minIdle: 10
      max-active: 20
      # 配置获取连接等待超时的时间(单位：毫秒)
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 2000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql
      validationQuery: select 1
      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
      testWhileIdle: true
      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
      testOnBorrow: false
      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
      testOnReturn: false
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle
      poolPreparedStatements: true
      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
      # 可以把这个数值配置大一些，比如说100
      maxOpenPreparedStatements: 20
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
      keepAlive: true
      # Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录
      aop-patterns: "com.springboot.template.dao.*"
      ########### 启用内置过滤器（第一个 stat必须，否则监控不到SQL）##########
      filters: stat,wall,slf4j
      # 自己配置监控统计拦截的filter
      filter:
        # 开启druiddatasource的状态监控
        stat:
          enabled: true
          db-type: mysql
          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000
        # 日志监控，使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      ########## 配置WebStatFilter，用于采集web关联监控的数据 ##########
      web-stat-filter:
        enabled: true                   # 启动 StatFilter
        url-pattern: /*                 # 过滤所有url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
        session-stat-enable: true       # 开启session统计功能
        session-stat-max-count: 1000    # session的最大个数,默认100
      ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########
      stat-view-servlet:
        enabled: true                   # 启用StatViewServlet
        url-pattern: /druid/*           # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
        reset-enable: false              # 不允许清空统计数据,重新计算
  #json 时间戳统一转换
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  aop:
    proxy-target-class: true
  #redis 配置
  redis:
    database: 1
    host: 39.107.111.110
    lettuce:
      pool:
        max-active: 8   #最大连接数据库连接数,设 0 为没有限制
        max-idle: 8     #最大等待连接中的数量,设 0 为没有限制
        max-wait: -1ms  #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        min-idle: 0     #最小等待连接中的数量,设 0 为没有限制
      shutdown-timeout: 100ms
    password: 'antsboot..'
    port: 6379
  resource:
    static-locations: classpath:/static/,classpath:/public/,D:/ants
  mail:
    host: smtp.163.com
    default-encoding: utf-8
  ## quartz定时任务,采用数据库方式
  quartz:
    job-store-type: jdbc
    initialize-schema: embedded
    #设置自动启动，默认为 true
    auto-startup: true
    #启动时更新己存在的Job
    overwrite-existing-jobs: false
    properties:
      org:
        quartz:
          scheduler:
            instanceName: MyScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: false
            misfireThreshold: 60000
            clusterCheckinInterval: 10000
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
#mybatis plus 设置
mybatis-plus:
  mapper-locations: classpath*:com/ants/**/**/mapper/xml/*Mapper.xml
  global-config:
    # 关闭MP3.0自带的banner
    banner: false
    db-config:
      #主键类型  0:"数据库ID自增",1:"该类型为未设置主键类型", 2:"用户输入ID",3:"全局唯一ID (数字类型唯一ID)", 4:"全局唯一ID UUID",5:"字符串全局唯一ID (idWorker 的字符串表示)";
      id-type: 4
      # 默认数据库表下划线命名
      table-underline: true
      #逻辑删除，未删除的字段值，0
      logic-not-delete-value: 0
      #逻辑删除，已删除的字段值，1
      logic-delete-value: 1
  configuration:
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 配置返回map中值为null时，也返回字段
    call-setters-on-nulls: true

swagger:
  enable: true

#ants专用配置
ants:
  # 本地：local\Minio：minio\阿里云：alioss
  uploadType: local
  path:
    #文件上传根目录 设置
    upload: D://ants-file
    #webapp文件路径
    webapp: D://ants-file
  # minio文件上传
  minio:
    minio_url: http://39.107.111.110:9000
    minio_name: minioadmin
    minio_pass: minioadmin
    bucketName: ants-file
  git:
    localPath: E://IntealliJ IDEA workspace          # 项目本地克隆地址
    username: 448810587@qq.com                       # 账号
    password: 448810587..                            # 密码
    giturl: https://gitee.com/hanshaung/ants.git     # git地址
    pjName: ants                                     # 项目名
    branch: master                                   # 分支名

# Sa-Token配置
sa-token:
  # token名称 (同时也是cookie名称)
  token-name: Ants-Token
  # token有效期，单位s 默认30天, -1代表永不过期
  timeout: -1
  # token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒
  activity-timeout: 1800
  # 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)
  is-share: false
  # token风格
  token-style: random-128
  # 是否输出操作日志
  is-log: false
